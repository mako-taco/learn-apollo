import {GQLContext} from './context';
/* tslint:disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  items: Array<GQLItem>;
  orders: Array<GQLOrder> | null;
}

export interface GQLItem {
  id: string;
  title: string;
  description: string;
  stock: number;
  price: number;
}

export interface GQLOrder {
  id: string;
  items: Array<GQLOrderItem>;
  timestamp: number;
}

export interface GQLOrderItem {
  item: GQLItem;
  qty: number;
}

export interface GQLMutation {
  createItem: string;
  createOrder: string;
  createUser: GQLCreateUser;
  login: GQLLogin;
}

export interface GQLCreateUser {
  id: string;
}

export interface GQLLogin {
  token: string;
}

export interface GQLUser {
  id: string;
  username: string;
  orders: Array<GQLOrder>;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Item?: GQLItemTypeResolver;
  Order?: GQLOrderTypeResolver;
  OrderItem?: GQLOrderItemTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  CreateUser?: GQLCreateUserTypeResolver;
  Login?: GQLLoginTypeResolver;
  User?: GQLUserTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = undefined> {
  items?: QueryToItemsResolver<TParent>;
  orders?: QueryToOrdersResolver<TParent>;
}

export interface QueryToItemsArgs {
  ids?: Array<string>;
}
export interface QueryToItemsResolver<TParent = undefined, TResult = Array<GQLItem>> {
  (parent: TParent, args: QueryToItemsArgs, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToOrdersArgs {
  userId: number;
}
export interface QueryToOrdersResolver<TParent = undefined, TResult = Array<GQLOrder> | null> {
  (parent: TParent, args: QueryToOrdersArgs, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GQLItemTypeResolver<TParent = GQLItem> {
  id?: ItemToIdResolver<TParent>;
  title?: ItemToTitleResolver<TParent>;
  description?: ItemToDescriptionResolver<TParent>;
  stock?: ItemToStockResolver<TParent>;
  price?: ItemToPriceResolver<TParent>;
}

export interface ItemToIdResolver<TParent = GQLItem, TResult = string> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ItemToTitleResolver<TParent = GQLItem, TResult = string> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ItemToDescriptionResolver<TParent = GQLItem, TResult = string> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ItemToStockResolver<TParent = GQLItem, TResult = number> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ItemToPriceResolver<TParent = GQLItem, TResult = number> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GQLOrderTypeResolver<TParent = GQLOrder> {
  id?: OrderToIdResolver<TParent>;
  items?: OrderToItemsResolver<TParent>;
  timestamp?: OrderToTimestampResolver<TParent>;
}

export interface OrderToIdResolver<TParent = GQLOrder, TResult = string> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface OrderToItemsResolver<TParent = GQLOrder, TResult = Array<GQLOrderItem>> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface OrderToTimestampResolver<TParent = GQLOrder, TResult = number> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GQLOrderItemTypeResolver<TParent = GQLOrderItem> {
  item?: OrderItemToItemResolver<TParent>;
  qty?: OrderItemToQtyResolver<TParent>;
}

export interface OrderItemToItemResolver<TParent = GQLOrderItem, TResult = GQLItem> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface OrderItemToQtyResolver<TParent = GQLOrderItem, TResult = number> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GQLMutationTypeResolver<TParent = undefined> {
  createItem?: MutationToCreateItemResolver<TParent>;
  createOrder?: MutationToCreateOrderResolver<TParent>;
  createUser?: MutationToCreateUserResolver<TParent>;
  login?: MutationToLoginResolver<TParent>;
}

export interface MutationToCreateItemArgs {
  title: string;
  description: string;
  initialStock: number;
  price: number;
}
export interface MutationToCreateItemResolver<TParent = undefined, TResult = string> {
  (parent: TParent, args: MutationToCreateItemArgs, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateOrderArgs {
  userId: string;
  itemIds: Array<string>;
  itemQtys: Array<string>;
}
export interface MutationToCreateOrderResolver<TParent = undefined, TResult = string> {
  (parent: TParent, args: MutationToCreateOrderArgs, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateUserArgs {
  username: string;
}
export interface MutationToCreateUserResolver<TParent = undefined, TResult = GQLCreateUser> {
  (parent: TParent, args: MutationToCreateUserArgs, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToLoginArgs {
  username: string;
}
export interface MutationToLoginResolver<TParent = undefined, TResult = GQLLogin> {
  (parent: TParent, args: MutationToLoginArgs, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GQLCreateUserTypeResolver<TParent = GQLCreateUser> {
  id?: CreateUserToIdResolver<TParent>;
}

export interface CreateUserToIdResolver<TParent = GQLCreateUser, TResult = string> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GQLLoginTypeResolver<TParent = GQLLogin> {
  token?: LoginToTokenResolver<TParent>;
}

export interface LoginToTokenResolver<TParent = GQLLogin, TResult = string> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GQLUserTypeResolver<TParent = GQLUser> {
  id?: UserToIdResolver<TParent>;
  username?: UserToUsernameResolver<TParent>;
  orders?: UserToOrdersResolver<TParent>;
}

export interface UserToIdResolver<TParent = GQLUser, TResult = string> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface UserToUsernameResolver<TParent = GQLUser, TResult = string> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface UserToOrdersResolver<TParent = GQLUser, TResult = Array<GQLOrder>> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export const schema: string = `
type User {
  id: ID!
  username: String!
  orders: [Order!]!
}

type Order {
  id: ID!
  items: [OrderItem!]!
  timestamp: Int!
}

type Item {
  id: ID!
  title: String!
  description: String!
  stock: Int!
  price: Int!
}

type OrderItem {
  item: Item!
  qty: Int!
}

type Login {
  token: String!
}

type CreateUser {
  id: ID!
}

####################################################################################################

type Query {
  items(ids: [ID!]): [Item!]!
  orders(userId: Int!): [Order!]
}

type Mutation {
  createItem(title: String!, description: String!, initialStock: Int!, price: Int!): ID!
  createOrder(userId: ID!, itemIds: [ID!]!, itemQtys: [ID!]!): ID!
  createUser(username: String!): CreateUser!
  login(username: String!): Login!
}
`
